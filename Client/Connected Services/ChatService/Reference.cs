//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ChatService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Server.Clases.Base")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DCreateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsBlockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastActivityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordHashField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DCreate {
            get {
                return this.DCreateField;
            }
            set {
                if ((this.DCreateField.Equals(value) != true)) {
                    this.DCreateField = value;
                    this.RaisePropertyChanged("DCreate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsBlocked {
            get {
                return this.IsBlockedField;
            }
            set {
                if ((this.IsBlockedField.Equals(value) != true)) {
                    this.IsBlockedField = value;
                    this.RaisePropertyChanged("IsBlocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastActivity {
            get {
                return this.LastActivityField;
            }
            set {
                if ((this.LastActivityField.Equals(value) != true)) {
                    this.LastActivityField = value;
                    this.RaisePropertyChanged("LastActivity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PasswordHash {
            get {
                return this.PasswordHashField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordHashField, value) != true)) {
                    this.PasswordHashField = value;
                    this.RaisePropertyChanged("PasswordHash");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeGetUsers", Namespace="http://schemas.datacontract.org/2004/07/Server.Service")]
    public enum TypeGetUsers : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlyInGroup = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OnlyOutInGroup = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://schemas.datacontract.org/2004/07/Server.Clases.Base")]
    [System.SerializableAttribute()]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserInGroup", Namespace="http://schemas.datacontract.org/2004/07/Server.Clases.Base")]
    [System.SerializableAttribute()]
    public partial class UserInGroup : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool MutedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RoleIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((this.GroupIDField.Equals(value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Muted {
            get {
                return this.MutedField;
            }
            set {
                if ((this.MutedField.Equals(value) != true)) {
                    this.MutedField = value;
                    this.RaisePropertyChanged("Muted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RoleID {
            get {
                return this.RoleIDField;
            }
            set {
                if ((this.RoleIDField.Equals(value) != true)) {
                    this.RoleIDField = value;
                    this.RaisePropertyChanged("RoleID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeGetMessage", Namespace="http://schemas.datacontract.org/2004/07/Server.Service")]
    public enum TypeGetMessage : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        All = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Last = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        First = 2,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMessage", Namespace="http://schemas.datacontract.org/2004/07/Server.Clases.Base")]
    [System.SerializableAttribute()]
    public partial class GroupMessage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GroupIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageSourceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Deleted {
            get {
                return this.DeletedField;
            }
            set {
                if ((this.DeletedField.Equals(value) != true)) {
                    this.DeletedField = value;
                    this.RaisePropertyChanged("Deleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GroupID {
            get {
                return this.GroupIDField;
            }
            set {
                if ((this.GroupIDField.Equals(value) != true)) {
                    this.GroupIDField = value;
                    this.RaisePropertyChanged("GroupID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageSource {
            get {
                return this.MessageSourceField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageSourceField, value) != true)) {
                    this.MessageSourceField = value;
                    this.RaisePropertyChanged("MessageSource");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ChatService.IChatService", CallbackContract=typeof(Client.ChatService.IChatServiceCallback))]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Register", ReplyAction="http://tempuri.org/IChatService/RegisterResponse")]
        Client.ChatService.RegisterResponse Register(Client.ChatService.RegisterRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Register", ReplyAction="http://tempuri.org/IChatService/RegisterResponse")]
        System.Threading.Tasks.Task<Client.ChatService.RegisterResponse> RegisterAsync(Client.ChatService.RegisterRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        Client.ChatService.LoginResponse Login(Client.ChatService.LoginRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Login", ReplyAction="http://tempuri.org/IChatService/LoginResponse")]
        System.Threading.Tasks.Task<Client.ChatService.LoginResponse> LoginAsync(Client.ChatService.LoginRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Leave", ReplyAction="http://tempuri.org/IChatService/LeaveResponse")]
        bool Leave(string AuthKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Leave", ReplyAction="http://tempuri.org/IChatService/LeaveResponse")]
        System.Threading.Tasks.Task<bool> LeaveAsync(string AuthKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetUsers", ReplyAction="http://tempuri.org/IChatService/GetUsersResponse")]
        Client.ChatService.GetUsersResponse GetUsers(Client.ChatService.GetUsersRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetUsers", ReplyAction="http://tempuri.org/IChatService/GetUsersResponse")]
        System.Threading.Tasks.Task<Client.ChatService.GetUsersResponse> GetUsersAsync(Client.ChatService.GetUsersRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateGroup", ReplyAction="http://tempuri.org/IChatService/CreateGroupResponse")]
        bool CreateGroup(string AuthKey, string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/CreateGroup", ReplyAction="http://tempuri.org/IChatService/CreateGroupResponse")]
        System.Threading.Tasks.Task<bool> CreateGroupAsync(string AuthKey, string Name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RemoveGroup", ReplyAction="http://tempuri.org/IChatService/RemoveGroupResponse")]
        bool RemoveGroup(string AuthKey, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RemoveGroup", ReplyAction="http://tempuri.org/IChatService/RemoveGroupResponse")]
        System.Threading.Tasks.Task<bool> RemoveGroupAsync(string AuthKey, int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AddUsersToGroup", ReplyAction="http://tempuri.org/IChatService/AddUsersToGroupResponse")]
        bool AddUsersToGroup(string AuthKey, int ID, int[] IDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/AddUsersToGroup", ReplyAction="http://tempuri.org/IChatService/AddUsersToGroupResponse")]
        System.Threading.Tasks.Task<bool> AddUsersToGroupAsync(string AuthKey, int ID, int[] IDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMyGroups", ReplyAction="http://tempuri.org/IChatService/GetMyGroupsResponse")]
        Client.ChatService.GetMyGroupsResponse GetMyGroups(Client.ChatService.GetMyGroupsRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMyGroups", ReplyAction="http://tempuri.org/IChatService/GetMyGroupsResponse")]
        System.Threading.Tasks.Task<Client.ChatService.GetMyGroupsResponse> GetMyGroupsAsync(Client.ChatService.GetMyGroupsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMessages", ReplyAction="http://tempuri.org/IChatService/GetMessagesResponse")]
        Client.ChatService.GetMessagesResponse GetMessages(Client.ChatService.GetMessagesRequest request);
        
        // CODEGEN: Generating message contract since the operation has multiple return values.
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/GetMessages", ReplyAction="http://tempuri.org/IChatService/GetMessagesResponse")]
        System.Threading.Tasks.Task<Client.ChatService.GetMessagesResponse> GetMessagesAsync(Client.ChatService.GetMessagesRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        bool SendMessage(string AuthKey, int groupID, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        System.Threading.Tasks.Task<bool> SendMessageAsync(string AuthKey, int groupID, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Error")]
        void Error(string message);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Register", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Password;
        
        public RegisterRequest() {
        }
        
        public RegisterRequest(string Login, string Password) {
            this.Login = Login;
            this.Password = Password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RegisterResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RegisterResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool RegisterResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Client.ChatService.User usr;
        
        public RegisterResponse() {
        }
        
        public RegisterResponse(bool RegisterResult, Client.ChatService.User usr) {
            this.RegisterResult = RegisterResult;
            this.usr = usr;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Login", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LoginRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Login;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Password;
        
        public LoginRequest() {
        }
        
        public LoginRequest(string Login, string Password) {
            this.Login = Login;
            this.Password = Password;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="LoginResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class LoginResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool LoginResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Client.ChatService.User usr;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string authKey;
        
        public LoginResponse() {
        }
        
        public LoginResponse(bool LoginResult, Client.ChatService.User usr, string authKey) {
            this.LoginResult = LoginResult;
            this.usr = usr;
            this.authKey = authKey;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUsers", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUsersRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthKey;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Client.ChatService.TypeGetUsers tps;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int GroupID;
        
        public GetUsersRequest() {
        }
        
        public GetUsersRequest(string AuthKey, Client.ChatService.TypeGetUsers tps, int GroupID) {
            this.AuthKey = AuthKey;
            this.tps = tps;
            this.GroupID = GroupID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetUsersResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetUsersResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetUsersResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Client.ChatService.User[] usr;
        
        public GetUsersResponse() {
        }
        
        public GetUsersResponse(bool GetUsersResult, Client.ChatService.User[] usr) {
            this.GetUsersResult = GetUsersResult;
            this.usr = usr;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMyGroups", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetMyGroupsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthKey;
        
        public GetMyGroupsRequest() {
        }
        
        public GetMyGroupsRequest(string AuthKey) {
            this.AuthKey = AuthKey;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMyGroupsResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetMyGroupsResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetMyGroupsResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public System.Collections.Generic.Dictionary<Client.ChatService.Group, Client.ChatService.UserInGroup> group;
        
        public GetMyGroupsResponse() {
        }
        
        public GetMyGroupsResponse(bool GetMyGroupsResult, System.Collections.Generic.Dictionary<Client.ChatService.Group, Client.ChatService.UserInGroup> group) {
            this.GetMyGroupsResult = GetMyGroupsResult;
            this.group = group;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMessages", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetMessagesRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string AuthKey;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public int groupID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public Client.ChatService.TypeGetMessage tgm;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public int count;
        
        public GetMessagesRequest() {
        }
        
        public GetMessagesRequest(string AuthKey, int groupID, Client.ChatService.TypeGetMessage tgm, int count) {
            this.AuthKey = AuthKey;
            this.groupID = groupID;
            this.tgm = tgm;
            this.count = count;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetMessagesResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class GetMessagesResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool GetMessagesResult;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public Client.ChatService.GroupMessage[] grMsg;
        
        public GetMessagesResponse() {
        }
        
        public GetMessagesResponse(bool GetMessagesResult, Client.ChatService.GroupMessage[] grMsg) {
            this.GetMessagesResult = GetMessagesResult;
            this.grMsg = grMsg;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : Client.ChatService.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<Client.ChatService.IChatService>, Client.ChatService.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.RegisterResponse Client.ChatService.IChatService.Register(Client.ChatService.RegisterRequest request) {
            return base.Channel.Register(request);
        }
        
        public bool Register(string Login, string Password, out Client.ChatService.User usr) {
            Client.ChatService.RegisterRequest inValue = new Client.ChatService.RegisterRequest();
            inValue.Login = Login;
            inValue.Password = Password;
            Client.ChatService.RegisterResponse retVal = ((Client.ChatService.IChatService)(this)).Register(inValue);
            usr = retVal.usr;
            return retVal.RegisterResult;
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.RegisterResponse> RegisterAsync(Client.ChatService.RegisterRequest request) {
            return base.Channel.RegisterAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.LoginResponse Client.ChatService.IChatService.Login(Client.ChatService.LoginRequest request) {
            return base.Channel.Login(request);
        }
        
        public bool Login(string Login1, string Password, out Client.ChatService.User usr, out string authKey) {
            Client.ChatService.LoginRequest inValue = new Client.ChatService.LoginRequest();
            inValue.Login = Login1;
            inValue.Password = Password;
            Client.ChatService.LoginResponse retVal = ((Client.ChatService.IChatService)(this)).Login(inValue);
            usr = retVal.usr;
            authKey = retVal.authKey;
            return retVal.LoginResult;
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.LoginResponse> LoginAsync(Client.ChatService.LoginRequest request) {
            return base.Channel.LoginAsync(request);
        }
        
        public bool Leave(string AuthKey) {
            return base.Channel.Leave(AuthKey);
        }
        
        public System.Threading.Tasks.Task<bool> LeaveAsync(string AuthKey) {
            return base.Channel.LeaveAsync(AuthKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.GetUsersResponse Client.ChatService.IChatService.GetUsers(Client.ChatService.GetUsersRequest request) {
            return base.Channel.GetUsers(request);
        }
        
        public bool GetUsers(string AuthKey, Client.ChatService.TypeGetUsers tps, int GroupID, out Client.ChatService.User[] usr) {
            Client.ChatService.GetUsersRequest inValue = new Client.ChatService.GetUsersRequest();
            inValue.AuthKey = AuthKey;
            inValue.tps = tps;
            inValue.GroupID = GroupID;
            Client.ChatService.GetUsersResponse retVal = ((Client.ChatService.IChatService)(this)).GetUsers(inValue);
            usr = retVal.usr;
            return retVal.GetUsersResult;
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.GetUsersResponse> GetUsersAsync(Client.ChatService.GetUsersRequest request) {
            return base.Channel.GetUsersAsync(request);
        }
        
        public bool CreateGroup(string AuthKey, string Name) {
            return base.Channel.CreateGroup(AuthKey, Name);
        }
        
        public System.Threading.Tasks.Task<bool> CreateGroupAsync(string AuthKey, string Name) {
            return base.Channel.CreateGroupAsync(AuthKey, Name);
        }
        
        public bool RemoveGroup(string AuthKey, int ID) {
            return base.Channel.RemoveGroup(AuthKey, ID);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveGroupAsync(string AuthKey, int ID) {
            return base.Channel.RemoveGroupAsync(AuthKey, ID);
        }
        
        public bool AddUsersToGroup(string AuthKey, int ID, int[] IDs) {
            return base.Channel.AddUsersToGroup(AuthKey, ID, IDs);
        }
        
        public System.Threading.Tasks.Task<bool> AddUsersToGroupAsync(string AuthKey, int ID, int[] IDs) {
            return base.Channel.AddUsersToGroupAsync(AuthKey, ID, IDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.GetMyGroupsResponse Client.ChatService.IChatService.GetMyGroups(Client.ChatService.GetMyGroupsRequest request) {
            return base.Channel.GetMyGroups(request);
        }
        
        public bool GetMyGroups(string AuthKey, out System.Collections.Generic.Dictionary<Client.ChatService.Group, Client.ChatService.UserInGroup> group) {
            Client.ChatService.GetMyGroupsRequest inValue = new Client.ChatService.GetMyGroupsRequest();
            inValue.AuthKey = AuthKey;
            Client.ChatService.GetMyGroupsResponse retVal = ((Client.ChatService.IChatService)(this)).GetMyGroups(inValue);
            group = retVal.group;
            return retVal.GetMyGroupsResult;
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.GetMyGroupsResponse> GetMyGroupsAsync(Client.ChatService.GetMyGroupsRequest request) {
            return base.Channel.GetMyGroupsAsync(request);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Client.ChatService.GetMessagesResponse Client.ChatService.IChatService.GetMessages(Client.ChatService.GetMessagesRequest request) {
            return base.Channel.GetMessages(request);
        }
        
        public bool GetMessages(string AuthKey, int groupID, Client.ChatService.TypeGetMessage tgm, int count, out Client.ChatService.GroupMessage[] grMsg) {
            Client.ChatService.GetMessagesRequest inValue = new Client.ChatService.GetMessagesRequest();
            inValue.AuthKey = AuthKey;
            inValue.groupID = groupID;
            inValue.tgm = tgm;
            inValue.count = count;
            Client.ChatService.GetMessagesResponse retVal = ((Client.ChatService.IChatService)(this)).GetMessages(inValue);
            grMsg = retVal.grMsg;
            return retVal.GetMessagesResult;
        }
        
        public System.Threading.Tasks.Task<Client.ChatService.GetMessagesResponse> GetMessagesAsync(Client.ChatService.GetMessagesRequest request) {
            return base.Channel.GetMessagesAsync(request);
        }
        
        public bool SendMessage(string AuthKey, int groupID, string message) {
            return base.Channel.SendMessage(AuthKey, groupID, message);
        }
        
        public System.Threading.Tasks.Task<bool> SendMessageAsync(string AuthKey, int groupID, string message) {
            return base.Channel.SendMessageAsync(AuthKey, groupID, message);
        }
    }
}
